terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region                   = var.region
  shared_credentials_files = ["/Users/mac/.aws/credentials"]
  profile                  = "wari"
}

resource "aws_vpc" "terra_vpc" {
  cidr_block = var.terra_subnet

  tags = {
    Name = "Terra VPC"
  }
}

resource "aws_internet_gateway" "terra_gw" {
  vpc_id = aws_vpc.terra_vpc.id

  tags = {
    Name = "mainTerraIGW"
  }
}

resource "aws_subnet" "terra_subnets" {
  count             = length(var.terra_pub_subnets)
  vpc_id            = aws_vpc.terra_vpc.id
  cidr_block        = element(var.terra_pub_subnets, count.index)
  availability_zone = element(var.aws_azs, count.index)
  tags = {
    Name = "Terraform Public Subnet ${count.index + 1} - ${element(var.terra_pub_subnets, count.index)}"
  }
}

resource "aws_route_table" "terra_route_table" {
  vpc_id = aws_vpc.terra_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.terra_gw.id
  }
  tags = {
    Name = "Terra Default Routing Table"
    Env  = "Dev"
  }
}

resource "aws_route_table_association" "terra_route_assoc" {
  count          = length(var.terra_pub_subnets)
  subnet_id      = element(aws_subnet.terra_subnets[*].id, count.index)
  route_table_id = aws_route_table.terra_route_table.id
}

# resource "aws_subnet" "terra_sunbet_1" {
#   vpc_id            = aws_vpc.terra_vpc.id
#   cidr_block        = var.terra_subnet_1
#   availability_zone = "us-west-2a"
#   tags = {
#     Name = "Main Terra Subnet"
#   }
# }

# resource "aws_subnet" "terra_sunbet_2" {
#   vpc_id            = aws_vpc.terra_vpc.id
#   cidr_block        = var.terra_subnet_2
#   availability_zone = "us-west-2b"
#   tags = {
#     Name = "Secondary Terra Subnet"
#   }
# }

# resource "aws_subnet" "terra_sunbet_3" {
#   vpc_id            = aws_vpc.terra_vpc.id
#   cidr_block        = var.terra_subnet_3
#   availability_zone = "us-west-2c"
#   tags = {
#     Name = "Third Terra Subnet"
#   }
# }



locals {
  ports_in = [
    443,
    80
  ]
  ports_out = [
    0
  ]
}

resource "aws_security_group" "allow_http" {
  name        = "allow_ssh_http_traffic"
  description = "Allow HTTP inbound traffic"
  vpc_id      = aws_vpc.terra_vpc.id

  ingress {
    description = "Allow HTTP Traffic"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["41.83.200.214/32"]
  }

  ingress {
    description = "Allow SSH Traffic"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["41.83.200.214/32"]
  }



  egress {
    description = "Allow every instance to access Internet"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_http_ssh"
  }
}

resource "aws_key_pair" "terra_pub_keypair" {
  key_name   = "terraform_ssh_key"
  public_key = var.ssh_pub_key
}

resource "aws_instance" "terraform_server" {
  count                       = 3
  ami                         = var.img
  instance_type               = var.instance_type
  subnet_id                   = element(aws_subnet.terra_subnets[*].id, count.index)
  security_groups             = ["${aws_security_group.allow_http.id}"]
  associate_public_ip_address = true
  key_name                    = aws_key_pair.terra_pub_keypair.key_name

  user_data = <<-EOF
#!/bin/bash
sudo apt update -y && sudo apt install nginx -y
sudo echo "Bienvenue sur l'instance : $(curl ipv4.icanhazip.com)" > /var/www/html/index.html
sudo systemctl start nginx
EOF 

  metadata_options {
    http_tokens = "required"
  }

  root_block_device {
    encrypted = true
  }
  tags = {
    Name          = var.sandboxes[count.index]
    Environnement = "dev"
  }
}

output "priv_ip_address" {
  description = "Instance private Ip Address"
  value       = aws_instance.terraform_server[*].private_ip
}

output "pub_ip_address" {
  description = "Instance public Ip Address"
  value       = aws_instance.terraform_server[*].public_ip
}
